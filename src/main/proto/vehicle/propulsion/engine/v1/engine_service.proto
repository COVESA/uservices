/*
 * Copyright 2023 GM Global Technology Operations LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package vehicle.propulsion.engine.v1;

import "google/rpc/status.proto";
import "uprotocol_options.proto";
import "vehicle/propulsion/engine/v1/engine_topics.proto";

option java_package = "org.covesa.uservice.vehicle.propulsion.engine.v1";
option java_multiple_files = true;

// This service provides the ability to request to reset the remaining life for
// the engine components such as the engine oil or air filter.
//
service Engine {
  // Service Metadata - Name, version, id, rpc methods
  option (uprotocol.name) = "propulsion.engine";
  option (uprotocol.version_major) = 1;
  option (uprotocol.version_minor) = 0;
  option (uprotocol.id) = 19;

  // Request to reset an engine component's life to 100%. After a reset, the
  // remaining life will go back to 100% and the health state of that component
  // will go back to the OK state.
  rpc ResetHealth(ResetHealthRequest) returns (ResetHealthResponse) {
    option (uprotocol.method_id) = 1;
  }
}

// Request to reset the engine component health. After a reset, the remaining
// life of the component will go back to 100% and the health state will go back
// to the OK state.
// Example components supported: oil, air_filter
//
message ResetHealthRequest {
  // Engine component name: oil, air_filter
  string name = 1;
}

// Response to reset health request
message ResetHealthResponse {
  // Rpc return status
  google.rpc.Status status = 1;
}
// The following messages are used to connect the service to the associated
// resource messages in the *resources.proto
//
// Service metadata option definitions - Resources, topics
//
message AirFilterOptions {
  option (uprotocol.base_topic_id) = 0;
  AirFilter.Resources name = 1 [ (uprotocol.resource_name_mask) = "*" ];
}

// Service metadata option definitions - Resources, topics
//
message OilOptions {
  option (uprotocol.base_topic_id) = 10;
  Oil.Resources name = 1 [ (uprotocol.resource_name_mask) = "*" ];
}

// Service metadata option definitions - Resources, topics
//
message CoolantOptions {
  option (uprotocol.base_topic_id) = 20;
  Coolant.Resources name = 1 [ (uprotocol.resource_name_mask) = "*" ];
}

// Service metadata option definitions - Resources, topics
//
message EngineStateOptions {
  option (uprotocol.base_topic_id) = 30;
  EngineState.Resources name = 1 [ (uprotocol.resource_name_mask) = "*" ];
}
