/*
 * Copyright 2023 GM Global Technology Operations LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package vehicle.body.cabin_climate.v1;

import "uservices_options.proto";

option java_package = "org.covesa.uservice.vehicle.body.cabin_climate.v1";
option java_multiple_files = true;

// The air_distribution field in the Zone message has one of the following
// AirDistribution enum values:
//
enum AirDistribution {
  // This value should not be used.
  AD_UNSPECIFIED = 0x00;
  // Air distribution off.
  AD_OFF = 0x01;
  // Air distribution is automatically selected based on requested temperature
  // and interior thermal conditions.
  AD_AUTO = 0x02;
  // Air distribution to floor only.
  AD_FLOOR = 0x03;
  // Air distribution to floor and instrument panel vents.
  AD_FLOOR_VENT = 0x04;
  // Air distribution to instrument panel vents.
  AD_VENT = 0x05;
  // Air distribution to instrument panel vents and windshield.
  AD_VENT_WINDSHIELD = 0x06;
  // Air distribution to windshield only.
  AD_WINDSHIELD = 0x07;
  // Air distribution to floor and windshield.
  AD_FLOOR_WINDSHIELD = 0x08;
  // Air distribution to floor, instrument panel vents and windshield.
  AD_FLOOR_VENT_WINDSHIELD = 0x09;
  // Air distribution to max defrost.
  AD_MAX_DEFROST = 0x0A;
}

// The blower_auto_state and air_distribution_auto_state fields in the Zone
// message have one of the following AutomaticMode enum values:
//
enum AutomaticMode {
  // This value should not be used.
  AM_UNSPECIFIED = 0x00;
  // Zone is off.
  AM_OFF = 0x01;
  // Setting is in automatic mode.
  AM_AUTO = 0x02;
  // Setting is in manual mode.
  AM_MANUAL = 0x03;
  // Setting is in automatic low mode. The system will attempt to bring the
  // temperature to the minimum temperature as fast as possible.
  AM_AUTO_LOW = 0x04;
  // Setting is in automatic high mode.  The system will attempt to bring the
  // temperature to the maximum temperature as fast as possible.
  AM_AUTO_HIGH = 0x05;
}

// Individual Zone statuses and requests.
//
message Zone {

  // reference to VSS branch
  option (vss_ref) = "Vehicle.Cabin.HVAC.Station";

  // The zone resource. It is returned in an event message and set by the
  // calling applications in sifferent update methods.
  Resource id = 0x01;

  // Temperature in degrees Celsius.
  float temperature = 0x02 [
    (unit) = CELSIUS,
    (max_value) = 0x32,
    (min_value) = 0x00,
    (default_value) = 0x16
  ];

  // Fan speed setting auto state.
  AutomaticMode fan_auto_state = 0x03 [ (readonly) = true ];

  // Fan setting in percent. 0 = Off, 100 = Maximum air is coming through the
  // vents.
  int32 fan_speed = 0x04 [ (unit) = PERCENT, (max_value) = 0x64, (min_value) = 0x00 ];

  // Air distribution setting auto state.
  AirDistribution air_distribution = 0x05;

  // True = Zone power is on.
  bool is_power_on = 0x06;

  // Fan and air distribution are set to "Auto". An application can
  // set this value to 'ON' but cannot set it to 'OFF'. The system exits auto
  // whenever the fan setting or air distribution is updated.
  // True = "on"
  bool is_auto_on = 0x07;

  // True = Prevent user from making requests to change settings.
  bool is_zone_locked = 0x08;

  // Air distribution setting auto state.
  AutomaticMode air_distribution_auto_state = 0x09;

  // Temperature setting state
  AutomaticMode temperature_auto_state = 0x0A [ (readonly) = true ];

  // Service meta-data option definitions - Resources
  //
  enum Resource {
    row1_left = 0x00;
    row1_right = 0x01;
    row2_left = 0x02;
    row2_right = 0x03;
    row3_left = 0x04;
    row3_right = 0x05;
  }
}

// Combined all zones in a vehicle
message Zones {
  // Individual Zone statuses and requests.
  repeated Zone zones = 0x01;

  // Service meta-data option definitions - Resources
  //
  enum Resource { cabin_hvac = 0x00; }
}

// The SystemSettings are a set of climate control-related statuses and request
// commands applicable across cabin zones and impacting the passenger
// compartment. These properties apply globally to the vehicle passenger
// compartment across multiple zones and include statuses and requests. The
// following sections describe the SystemSettings message status information and
// requests that are available via the API.
//
message SystemSettings {

  // True = All zones are synced to the driver's selected climate control
  // settings.
  bool sync_all = 0x01;

  // True = Rear zones are synced to the driver's climate control settings.
  bool sync_rear_to_driver = 0x02;

  // True = Third row is synced to the driver's climate control settings.
  bool sync_3rdRow_to_driver = 0x03;

  // Corrected front cabin air and temperature.
  // This field is read-only.
  int32 estimated_cabin_temperature = 0x04 [
    (unit) = CELSIUS,
    (readonly) = true,
    (max_value) = 0x32,
    (min_value) = 0x00
  ];

  // True = Prevent Row 2 zone (right and left) passengers from changing climate
  // settings.
  bool rear_zone_lockout = 0x05;

  // Set air recirculation mode to outside/inside air.
  // True = inside air. False = outside air (default).
  bool air_recirc_mode = 0x06;

  // A request for maximum defrost for the front windshield. True = "on".
  bool max_defrost = 0x07;

  // A request for defogging of the rear window. True = "on".
  bool rear_window_defog = 0x08;

  // An indication the HVAC system is experiencing a diagnosed failure condition
  // or the sensed cabin temperature is currently outside of what is
  // considered to be a safe range. True = Failure.
  // This field is read-only.
  bool cabin_conditioning_invalid = 0x09 [ (readonly) = true ];

  // True = Prevent Row 3 zone (right or left) passengers from changing climate
  // settings.
  // This field is write-only.
  bool third_row_zone_lockout = 0x0A [ (writeonly) = true ];

  // The ac_compressor_setting field in the SystemSettings message has one of
  // the following CompressorSetting enum values:
  //
  enum CompressorSetting {
    // This value should not be used.
    CS_UNSPECIFIED = 0x00;
    // The device is on.
    CS_ON = 0x01;
    // The device is off.
    CS_OFF = 0x02;
    // The device is in economy mode.
    CS_ECONOMY = 0x03;
  }

  // The current status of the air conditioning compressor.
  CompressorSetting ac_compressor_setting = 0x0B;

  // The heater_setting field in the SystemSettings message has one of the
  // following HeaterSetting enum values:
  //
  enum HeaterSetting {
    // This value should not be used.
    HS_UNSPECIFIED = 0x00;
    // The heater is on.
    HS_HEAT_ON = 0x01;
    // The heater is off.
    HS_HEAT_OFF = 0x02;
  }

  // The current status of the HVAC heater setting.
  HeaterSetting heater_setting = 0x0C; 

  // The temperature_units field in the SystemSettings message has one of the
  // following TemperatureUnits enum values:
  //
  enum TemperatureUnits {
    // This value should not be used.
    TU_UNSPECIFIED = 0x00;
    // The temperature shown is in Celsius.
    TU_CELSIUS = 0x01;
    // The temperature shown is in Farenheit.
    TU_FAHRENHEIT = 0x02;
  }

  // The temperature units displayed to the driver.
  // This field is read-only.
  TemperatureUnits temperature_units = 0x0D [ (readonly) = true ];

  // The ionizer_status field in the SystemSettings message has one of the
  // following IonizerStatus enum values:
  //
  enum IonizerStatus {
    // This value should not be used.
    IS_UNSPECIFIED = 0x00;
    // The device is off.
    IS_OFF = 0x01;
    // The device is on.
    IS_ON = 0x02;
    // The device is at a low setting.
    IS_LOW = 0x03;
    // The device is is at a high setting.
    IS_HIGH = 0x04;
  }

  // The current status of the HVAC ionizer device in the cabin.
  // The ionizer improves air quality in the cabin.
  // This field is read-only.
  IonizerStatus ionizer_status = 0x0E [ (readonly) = true ];

  // True = Interaction requested from the user on the in-vehicle display unit.
  // This field is read-only.
  bool user_controls_interaction = 0x0F [ (readonly) = true ];

  // Service meta-data option definitions - Resources, topics
  //
  enum Resources { system_settings = 0x00; }
}
