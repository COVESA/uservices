/*
 * Copyright 2023 GM Global Technology Operations LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package vehicle.body.cabin_climate.v1;

import "google/protobuf/field_mask.proto";
import "google/rpc/status.proto";
import "uprotocol_options.proto";
import "vehicle/body/cabin_climate/v1/cabin_climate_properties.proto";
import "vehicle/body/cabin_climate/v1/cabin_climate_topics.proto";

option java_package = "org.covesa.uservice.vehicle.body.cabin_climate.v1";
option java_multiple_files = true;

// This service provides the ability to request updates to cabin climate zones
// and system settings resources.
//
service BodyCabinclimate {
  // Service meta-data option definitions - Name, version, id, rpc method
  option (uprotocol.name) = "body.cabin_climate";
  option (uprotocol.version_major) = 1;
  option (uprotocol.version_minor) = 2;
  option (uprotocol.id) = 5;
  option (number_of_row_1_zones) = 2;
  option (number_of_row_2_zones) = 0;
  option (number_of_row_3_zones) = 0;
  option (is_front_rear_independent_hvac_available) = true;

  // Controls climate settings for a zone.
  rpc ExecuteClimateCommand(ClimateCommand) returns (google.rpc.Status) {
    option (uprotocol.method_id) = 1;
  }
  // Controls climate system settings.
  rpc UpdateSystemSettings(UpdateSystemSettingsRequest)
      returns (google.rpc.Status) {
    option (uprotocol.method_id) = 2;
  }

  // Controls temperature settings for a zone.
  rpc SetTemperature(SetTemperatureRequest) returns (SetTemperatureResponse) {
    option (uprotocol.method_id) = 3;
  }

  // Controls Fan settings for a zone.
  rpc SetFan(SetFanRequest) returns (SetFanResponse) { option (uprotocol.method_id) = 4; }

  // Controls air distribution settings for a zone.
  rpc SetAirDistribution(SetAirDistributionRequest)
      returns (SetAirDistributionResponse) {
    option (uprotocol.method_id) = 5;
  }
  // Controls power settings for a zone.
  rpc SetPower(SetPowerRequest) returns (SetPowerResponse) {
    option (uprotocol.method_id) = 6;
  }

  // Controls power settings for a zone.
  rpc SetLock(SetLockRequest) returns (SetLockResponse) {
    option (uprotocol.method_id) = 7;
  }
}

// Use the ClimateCommand method to request a change to the settings for
// a particular zone.
//
message ClimateCommand {
  // The Zone message with requested new values.
  Zone zone = 1;

  // Specifies a subset of fields to be modified in this update.
  google.protobuf.FieldMask update_mask = 2;
}

// Use the UpdateSystemSettingsRequest method to request a change in the system
// settings of the vehicle.
//
message UpdateSystemSettingsRequest {
  // The System Settings message with requested new values.
  SystemSettings settings = 1;

  // Specifies a subset of fields to be modified in this update.
  google.protobuf.FieldMask update_mask = 2;
}

// Use the SetTemperature method to request a change to the settings for
// a particular zone.
//
message SetTemperatureRequest {
  // The zone selected
  Zone.Resource id = 1;

  // Specifies the value of temperature to be modified in this update.
  float temperature = 2;

  // Specifies the state of temperature to be modified in this update.
  AutomaticMode temperature_state = 3;
}

// Response to temperature request
message SetTemperatureResponse {
  // Rpc return status
  google.rpc.Status status = 1;
}

// Use the SetTemperature method to request a change to the settings for
// a particular zone.
//
message SetFanRequest {
  // The zone selected
  Zone.Resource id = 1;

  // Specifies the value of fan speed to be modified in this update.
  int32 fan_speed = 2;

  // Specifies the state of the fan to be modified in this update.
  bool is_fan_auto_on = 3;
}

// Response message to fan request
message SetFanResponse {
  // Rpc return status
  google.rpc.Status status = 1;
}

// Use the SetTemperature method to request a change to the settings for
// a particular zone.
//
message SetAirDistributionRequest {
  // The zone selected
  Zone.Resource id = 1;

  // Specifies the air direction to be modified in this update.
  AirDistribution air_distribution = 2;

  // Specifies the state of the air distribution to be modified in this update.
  AutomaticMode air_distribution_state = 3;
}

// Response message to air distribution request
message SetAirDistributionResponse {
  // Rpc return status
  google.rpc.Status status = 1;
}

// Use the SetTemperature method to request a change to the settings for
// a particular zone.
//
message SetPowerRequest {
  // The zone selected
  Zone.Resource id = 1;

  // Specifies the value of power to be modified in this update..
  bool is_power_on = 2;
}

// Response message to power request
message SetPowerResponse {
  // Rpc return status
  google.rpc.Status status = 1;
}

// Use the SetTemperature method to request a change to the settings for
// a particular zone.
//
message SetLockRequest {
  // The zone selected
  Zone.Resource id = 1;

  // Specifies the value of lock zone to be modified in this update.
  bool is_zone_locked = 2;
}

// Response message to lock request
message SetLockResponse {
  // Rpc return status
  google.rpc.Status status = 1;
}

// The following messages are used to connect the service to the associated
// resource messages in the *resources.proto
//
// Service meta-data option definitions - Resources, topics
//
message SystemSettingsOptions {
  option (uprotocol.base_topic_id) = 0;
  option (is_rear_defog_available) = true;
  option (is_heater_available) = true;
  option (is_ionizer_status_available) = true;
  SystemSettings.Resources resource_name = 1 [ (uprotocol.resource_name_mask) = "*" ];
}

// Service meta-data option definitions - Resources, topics
//
message ZonesOptions {
  option (uprotocol.base_topic_id) = 10;
  option (temperature_setpoint_min) = 16;
  option (temperature_setpoint_max) = 31;
  option (number_of_blower_levels_row_1) = 8;
  option (number_of_blower_levels_row_2) = 8;
  option (is_auto_available) = true;
  option (blowers_available_row_1) = 1;
  option (blowers_available_row_2) = 0;
  option (blowers_available_row_3) = 0;
  option (airdistribution_available_row_1) = 1;
  option (airdistribution_available_row_2) = 0;
  option (airdistribution_available_row_3) = 0;
  option (power_zone_available_row_1) = 1;
  option (power_zone_available_row_2) = 0;
  option (power_zone_available_row_3) = 0;
  Zones.Resource resource_name = 1 [ (uprotocol.resource_name_mask) = "*" ];
}
